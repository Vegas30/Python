# Задача: Оптимизация отображения деревьев в лесу с использованием паттерна Flyweight
# Вы разрабатываете приложение для симуляции леса. В лесу может быть множество деревьев разных типов.
# Каждое дерево имеет следующие свойства:
#
# Уникальные свойства (конкретное дерево):
#
# Позиция на карте (x, y).
# Общие свойства (тип дерева):
#
# Название вида дерева (например, "Береза", "Дуб").
# Цвет листьев.
# Высота дерева.
# Условия задачи:
# Создайте структуру для хранения общих данных о деревьях, чтобы избежать дублирования (используйте Flyweight).
# Реализуйте класс для конкретного дерева, который будет ссылаться на общий объект типа дерева.
# Напишите фабрику, которая будет создавать и возвращать общие объекты типа дерева.
# Напишите код, который создает множество деревьев разных типов на карте, но при этом эффективно использует память.
# Пример:
# На вход подаются данные о деревьях в формате:
# [
#     {"type": "Береза", "color": "Зеленый", "height": 15, "x": 10, "y": 20},
#     {"type": "Береза", "color": "Зеленый", "height": 15, "x": 15, "y": 25},
#     {"type": "Дуб", "color": "Темно-зеленый", "height": 20, "x": 30, "y": 35},
# ]
# На выходе вы получите информацию о созданных объектах, включая общие свойства дерева, и сможете проверить,
# что для одного типа дерева используется один общий объект.


class Flyweight:
    """Летучий объект, который хранит общее состояние."""

    def __init__(self, shared_state):
        self.shared_state = shared_state  # Внутреннее состояние

    def operation(self, unique_state):
        """Использует внешнее состояние."""
        print(f"Общий состояние: {self.shared_state}, уникальное состояние: {unique_state}")


class FlyweightFactory:
    """Фабрика для управления летучими объектами."""

    def __init__(self):
        self._flyweights = {}

    def get_flyweight(self, shared_state):
        """Возвращает существующий объект или создаёт новый."""
        if shared_state not in self._flyweights:
            self._flyweights[shared_state] = Flyweight(shared_state)
        return self._flyweights[shared_state]

    # Пример использования


factory = FlyweightFactory()

# Создаём несколько летучих объектов с общим состоянием
flyweight1 = factory.get_flyweight("Общий Стейт 1")
flyweight2 = factory.get_flyweight("Общий Стейт 2")

# Применяем уникальное состояние
flyweight1.operation("Уникальное состояние A")
flyweight2.operation("Уникальное состояние B")
flyweight1.operation("Уникальное состояние C")