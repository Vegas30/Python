# Задача: Приготовление Бургеров
# Паттерн "Строитель": Используйте его для создания бургера. Это позволит Вам гибко добавлять или изменять ингредиенты.
#
# Паттерн "Фабрика": Создайте разные виды котлет (например, куриные, вегетарианские) с помощью этого паттерна.
#
# Паттерн "Декоратор": Используйте его для добавления различных соусов и топпингов к бургерам, не изменяя основной класс бургера.
#
# Вам необходимо разработать программу, которая поможет пользователю приготовить бургеры. Программа должна включать следующие функции:
#
# Составление списка ингредиентов:
#
# Пользователь должен иметь возможность вводить количество бургеров, которые он хочет приготовить, и программа должна автоматически рассчитывать необходимые ингредиенты.
# Для каждого бургера требуется:
# 125 г говяжьего фарша (при расчете на 4 бургера)
# 1/4 ч. л. соли
# 1/8 ч. л. черного перца
# 1/4 ч. л. чесночного порошка (по желанию)
# 1/4 ч. л. лукового порошка (по желанию)
# 1 булочка для бургера
# 1 ломтик сыра
# Листья салата
# 1/4 помидора (нарезанного кольцами)
# 1/4 огурца (маринованного или свежего, по желанию)
# Соусы по вкусу
# Процесс приготовления:
#
# Программа должна выводить пошаговые инструкции по приготовлению котлет и сборке бургера, включая:
# Смешивание ингредиентов для котлет.
# Формирование котлет и их жарка.
# Подготовка булочек.
# Сборка бургера.
# Подача:
#
# Программа должна предложить варианты подачи бургера, например, с картофелем фри или салатом.
#
#
#
#                                                                                                            метаклассы
# Создание простого метакласса: Напишите метакласс, который добавляет атрибут created_at с текущей датой и временем к любому классу, который он создает.
#
# Проверка атрибутов: Создайте метакласс, который проверяет, что все атрибуты класса являются строками. Если это не так, выбрасывайте исключение.
#
# Автоматическое добавление методов: Реализуйте метакласс, который автоматически добавляет метод __str__, возвращающий строковое представление класса.
#
# Счетчик экземпляров: Напишите метакласс, который будет отслеживать количество созданных экземпляров класса и добавлять атрибут instance_count к классу.
#
# Наследование атрибутов: Создайте метакласс, который будет наследовать атрибуты от родительского класса, если они не определены в дочернем классе.
#
# Переопределение методов: Реализуйте метакласс, который переопределяет метод __init__ класса, добавляя дополнительную логику при создании экземпляров.
#
# Валидация типов: Напишите метакласс, который проверяет типы аргументов методов класса и выбрасывает исключение, если типы не совпадают с ожидаемыми.
#
# Декорирование методов: Создайте метакласс, который автоматически декорирует все методы класса с помощью заданного декоратора.
#
# Создание интерфейсов: Реализуйте метакласс, который позволяет создавать интерфейсы, проверяя, что все методы, определенные в интерфейсе, реализованы в классе.
#
# Логирование создания экземпляров: Напишите метакласс, который будет логировать информацию о каждом созданном экземпляре класса, включая имя класса и его атрибуты.